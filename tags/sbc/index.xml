<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SBC on Net i Dev Blog</title>
    <link>https://pejotzet.github.io/pejotzet/tags/sbc/</link>
    <description>Recent content in SBC on Net i Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl</language>
    <lastBuildDate>Sun, 13 Aug 2023 07:58:41 +0000</lastBuildDate><atom:link href="https://pejotzet.github.io/pejotzet/tags/sbc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Budowanie aplikacji dla SBC w środowisku emulowanym</title>
      <link>https://pejotzet.github.io/pejotzet/post/2023-08-13-emulated-building-for-sbc/</link>
      <pubDate>Sun, 13 Aug 2023 07:58:41 +0000</pubDate>
      
      <guid>https://pejotzet.github.io/pejotzet/post/2023-08-13-emulated-building-for-sbc/</guid>
      <description>&lt;p&gt;Komputery jednopłytkowe (ang. SBC — &lt;em&gt;Single Board Computer&lt;/em&gt;) to uniwersalne urządzenia mikroprocesorowe pracujące pod kontrolą systemu operacyjnego.
Zazwyczaj systemem tym jest Linux.
Architektury komputerów jednopłytkowych mogą istotnie się różnić od architektur stosowanych dla komputerów osobistych.
Niestety natywne uruchamianie kodu z wykorzystaniem GUI pracującego na systemie &lt;em&gt;target&lt;/em&gt; jest często niewykonalne, głównie ze względu na ograniczony interfejs użytkownika i niezbyt duże zasoby urządzenia.
Zazwyczaj problem ten rozwiązuje się przy użyciu narzędzi do kompilacji skrośnej.&lt;/p&gt;
&lt;p&gt;W niniejszym opracowaniu przedstawiono podejście alternatywne bazujące na wykorzystaniu emulacji architektury urządzenia docelowego z wykorzystaniem &lt;code&gt;QEMU&lt;/code&gt; i połączonej z hermetyzacją środowiska developerskiego w kontenerze Docker&amp;rsquo;a.
Dzięki tej technice możliwe jest wygenerowanie kodu binarnego dla urządzenia docelowego bez korzystania z technik kompilacji skrośnej.
Jako frontend dewelopera zaproponowano wykorzystanie programu &lt;code&gt;VS Code&lt;/code&gt; oraz techniki &lt;code&gt;DevContainers&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak kompilować i debugować aplikacje w C/C&#43;&#43; na komputery jednopłytkowe korzystając z VS Code</title>
      <link>https://pejotzet.github.io/pejotzet/post/2023-08-12-c-cpp-development-for-sbc-in-code/</link>
      <pubDate>Sat, 12 Aug 2023 13:13:20 +0000</pubDate>
      
      <guid>https://pejotzet.github.io/pejotzet/post/2023-08-12-c-cpp-development-for-sbc-in-code/</guid>
      <description>&lt;p&gt;Komputery jednopłytkowe (ang. &lt;code&gt;SBC&lt;/code&gt; — &lt;em&gt;Single Board Computer&lt;/em&gt;) to uniwersalne urządzenia mikroprocesorowe pracujące pod kontrolą systemu operacyjnego.
Zazwyczaj systemem tym jest Linux.
Architektury komputerów jednopłytkowych mogą istotnie się różnić od architektur stosowanych dla komputerów osobistych.
W rezultacie przygotowanie aplikacji w postaci binarnej na urządzenie docelowe (&lt;em&gt;target&lt;/em&gt;) na komputerze osobistym (&lt;em&gt;host&lt;/em&gt;) wymaga wielu, często dość skomplikowanych, zabiegów.
Uwaga niniejszego opracowania skupiona jest na realizacji różnych scenariuszy pracy z wykorzystaniem edytora &lt;code&gt;VS Code&lt;/code&gt; i eliminujących konieczność instalacji i konfiguracji środowiska graficznego na &lt;code&gt;SBC&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
