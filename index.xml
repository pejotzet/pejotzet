<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Net i Dev Blog</title>
    <link>https://pejotzet.github.io/pejotzet/</link>
    <description>Recent content on Net i Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl</language>
    <lastBuildDate>Sun, 13 Aug 2023 07:58:41 +0000</lastBuildDate><atom:link href="https://pejotzet.github.io/pejotzet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Budowanie aplikacji dla SBC w środowisku emulowanym</title>
      <link>https://pejotzet.github.io/pejotzet/post/2023-08-13-emulated-building-for-sbc/</link>
      <pubDate>Sun, 13 Aug 2023 07:58:41 +0000</pubDate>
      
      <guid>https://pejotzet.github.io/pejotzet/post/2023-08-13-emulated-building-for-sbc/</guid>
      <description>&lt;p&gt;Komputery jednopłytkowe (ang. SBC — &lt;em&gt;Single Board Computer&lt;/em&gt;) to uniwersalne urządzenia mikroprocesorowe pracujące pod kontrolą systemu operacyjnego.
Zazwyczaj systemem tym jest Linux.
Architektury komputerów jednopłytkowych mogą istotnie się różnić od architektur stosowanych dla komputerów osobistych.
Niestety natywne uruchamianie kodu z wykorzystaniem GUI pracującego na systemie &lt;em&gt;target&lt;/em&gt; jest często niewykonalne, głównie ze względu na ograniczony interfejs użytkownika i niezbyt duże zasoby urządzenia.
Zazwyczaj problem ten rozwiązuje się przy użyciu narzędzi do kompilacji skrośnej.&lt;/p&gt;
&lt;p&gt;W niniejszym opracowaniu przedstawiono podejście alternatywne bazujące na wykorzystaniu emulacji architektury urządzenia docelowego z wykorzystaniem &lt;code&gt;QEMU&lt;/code&gt; i połączonej z hermetyzacją środowiska developerskiego w kontenerze Docker&amp;rsquo;a.
Dzięki tej technice możliwe jest wygenerowanie kodu binarnego dla urządzenia docelowego bez korzystania z technik kompilacji skrośnej.
Jako frontend dewelopera zaproponowano wykorzystanie programu &lt;code&gt;VS Code&lt;/code&gt; oraz techniki &lt;code&gt;DevContainers&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak kompilować i debugować aplikacje w C/C&#43;&#43; na komputery jednopłytkowe korzystając z VS Code</title>
      <link>https://pejotzet.github.io/pejotzet/post/2023-08-12-c-cpp-development-for-sbc-in-code/</link>
      <pubDate>Sat, 12 Aug 2023 13:13:20 +0000</pubDate>
      
      <guid>https://pejotzet.github.io/pejotzet/post/2023-08-12-c-cpp-development-for-sbc-in-code/</guid>
      <description>&lt;p&gt;Komputery jednopłytkowe (ang. &lt;code&gt;SBC&lt;/code&gt; — &lt;em&gt;Single Board Computer&lt;/em&gt;) to uniwersalne urządzenia mikroprocesorowe pracujące pod kontrolą systemu operacyjnego.
Zazwyczaj systemem tym jest Linux.
Architektury komputerów jednopłytkowych mogą istotnie się różnić od architektur stosowanych dla komputerów osobistych.
W rezultacie przygotowanie aplikacji w postaci binarnej na urządzenie docelowe (&lt;em&gt;target&lt;/em&gt;) na komputerze osobistym (&lt;em&gt;host&lt;/em&gt;) wymaga wielu, często dość skomplikowanych, zabiegów.
Uwaga niniejszego opracowania skupiona jest na realizacji różnych scenariuszy pracy z wykorzystaniem edytora &lt;code&gt;VS Code&lt;/code&gt; i eliminujących konieczność instalacji i konfiguracji środowiska graficznego na &lt;code&gt;SBC&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak uruchamiać programy dla ESP32 korzystając z ESP-Prog</title>
      <link>https://pejotzet.github.io/pejotzet/post/2023-08-12-how-to-debug-esp32-with-esp-prog/</link>
      <pubDate>Sat, 12 Aug 2023 13:13:20 +0000</pubDate>
      
      <guid>https://pejotzet.github.io/pejotzet/post/2023-08-12-how-to-debug-esp32-with-esp-prog/</guid>
      <description>&lt;!-- &lt;style&gt;
/* Definicje CSS */
body {
  font-family: Arial, sans-serif;
}

h1 {
  color: #007bff;
}

h2 {
  color: #007bff;
}
.container {
  display: flex;
  justify-content: space-around;
}
&lt;/style&gt;
 --&gt;
&lt;style&gt;
.side-by-side-image {
  width: 400px;
  height: auto;
  border: 1px solid #ccc;
  margin: 10px;
}
&lt;/style&gt;
&lt;p&gt;&lt;code&gt;ESP-Prog&lt;/code&gt; jest programatorem i debuggerem do platformy ESP32.
Niniejszy dokument opisuje jak korzystać z tego urządzenia w systemie Linux z zainstalowanym edytorem &lt;code&gt;Code&lt;/code&gt; wyposażonym w rozszerzenie &lt;code&gt;PlatformIO&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak założyć i utrzymywać statyczny serwis WWW wykorzystując Docker&#39;a i Code</title>
      <link>https://pejotzet.github.io/pejotzet/post/2023-08-05-static-site-in-hugo/</link>
      <pubDate>Sat, 05 Aug 2023 10:06:43 +0000</pubDate>
      
      <guid>https://pejotzet.github.io/pejotzet/post/2023-08-05-static-site-in-hugo/</guid>
      <description>&lt;p&gt;W poradniku pokazano jak wykorzystać konteneryzację i wsparcie dla niej w &lt;code&gt;Visual Studio Code&lt;/code&gt; do realizacji statycznego serwisu WWW.
Opis obejmuje wykorzystanie kontenerów do stworzenia hermetycznego i przenośnego środowiska pracy
oraz hosting lokalny i z użyciem &lt;code&gt;GitHub&lt;/code&gt;.
Przedstawiona metoda lokalnego hostingu umożliwia dostęp do serwisu za pomocą bezpiecznego protokołu &lt;code&gt;HTTPS&lt;/code&gt; i umożliwia korzystanie z usług dynamicznego rozwiązywania nazw gdy adres &lt;code&gt;IP&lt;/code&gt; zrealizowanego serwera jest zmienny.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>https://pejotzet.github.io/pejotzet/about/</link>
      <pubDate>Sat, 11 Apr 2020 19:15:32 +0800</pubDate>
      
      <guid>https://pejotzet.github.io/pejotzet/about/</guid>
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.
Hugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.</description>
    </item>
    
  </channel>
</rss>
